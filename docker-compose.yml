version: "3"

services:
  cert-gen:
    image: alpine:latest
    container_name: cert-gen
    command: /scripts/generate-certs.sh
    volumes:
      - ./scripts/generate-certs.sh:/scripts/generate-certs.sh
      - haproxy_cert_data:/certs/haproxy
      - cavern_cert_data:/certs/src-cavern
      
  haproxy:
    image: haproxytech/haproxy-debian:latest
    container_name: haproxy
    user: "root:root"
    depends_on:
      - cert-gen
    networks:
      src-network:
        ipv4_address: 172.26.0.2
    ports:
      - "443:443"
    volumes:
      - haproxy_cert_data:/etc/ssl/private/:ro
      - ./infra/haproxy/config:/usr/local/etc/haproxy:ro
    command: >
      bash -c "
        while [ ! -s /etc/ssl/private/server-cert.pem ]; do
          echo 'Waiting for server-cert.pem...';
          sleep 1;
        done;
        echo 'Certificate found. Starting HAProxy.';
        exec haproxy -f /usr/local/etc/haproxy/haproxy.cfg
      "

  reg:
    image: images.opencadc.org/core/reg:1.2.0
    depends_on:
      - haproxy
    container_name: reg
    user: "tomcat:tomcat"
    networks:
      src-network:
        ipv4_address: 172.26.0.3
    volumes:
      - ./infra/reg/config:/config:ro
      - ./infra/reg/cadc-content:/content:ro
    extra_hosts:
      - "haproxy.cadc.dao.nrc.ca:172.26.0.2"

  src-posix-mapper:
    image: images.opencadc.org/platform/posix-mapper:0.3.1
    depends_on:
      postgres_posixmapper:
        condition: service_healthy
      haproxy:
        condition: service_started
    container_name: src-posix-mapper
    user: "root:root"
    networks:
      src-network:
        ipv4_address: 172.26.0.61
    volumes:
      - ./platform/src-posix-mapper/config:/config:ro
      - ./platform/src-posix-mapper/../local_data/src-posix-mapper:/data:rw
    extra_hosts:
      - "haproxy.cadc.dao.nrc.ca:172.26.0.2"

  srcnodedb:
    container_name: srcnodedb
    image: postgres:14
    networks:
      src-network:
        ipv4_address: 172.26.0.50
    environment:
      POSTGRES_USER: tapadm
      POSTGRES_PASSWORD: pw-tapadm
      POSTGRES_DB: content
    volumes:
      - srcnodedb_data:/var/lib/postgresql/data
      - ./platform/srcnodedb/init-uws.sql:/docker-entrypoint-initdb.d/init-uws.sql:ro
    extra_hosts:
      - "haproxy.cadc.dao.nrc.ca:172.26.0.2"

  postgres_posixmapper:
    container_name: postgres_posixmapper
    image: postgres:14
    networks:
      src-network:
        ipv4_address: 172.26.0.51
    environment:
      POSTGRES_USER: cadmin
      POSTGRES_PASSWORD: pw-cadmin
      POSTGRES_DB: mapping
    volumes:
      - postgres_posixmapper_data:/var/lib/postgresql/data
      - ./platform/src-posix-mapper/db-init:/docker-entrypoint-initdb.d/:ro
    extra_hosts:
      - "haproxy.cadc.dao.nrc.ca:172.26.0.2"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cadmin -d mapping"]
      interval: 5s
      timeout: 5s
      retries: 5

  src-cavern:
    image: images.opencadc.org/platform/cavern:0.8.2
    depends_on:
      - haproxy
      - src-posix-mapper
      - cert-gen
    container_name: src-cavern
    user: "root:root"
    networks:
      src-network:
        ipv4_address: 172.26.0.60
    volumes:
      - ./platform/src-cavern/config:/config:ro
      - ./platform/src-cavern/../local_data/src-cavern:/data:rw
      - cavern_cert_data:/ssl-config:ro
    extra_hosts:
      - "haproxy.cadc.dao.nrc.ca:172.26.0.2"
      - "srcnodedb:172.26.0.50"
    command: >
      bash -c "
      echo 'Checking for cert file at /ssl-config/haproxy-pub.pem...';
      while [ ! -s /ssl-config/haproxy-pub.pem ]; do
        echo 'Waiting for haproxy-pub.pem to appear...';
        sleep 1;
      done;
      echo 'Cert found, importing into Java keystore...';
      keytool -importcert \
        -keystore /usr/lib/jvm/java-11-openjdk-11.0.25.0.9-3.fc40.x86_64/lib/security/cacerts \
        -storepass changeit -noprompt \
        -alias haproxy-local \
        -file /ssl-config/haproxy-pub.pem;
      echo 'Starting CADC Tomcat...';
      exec cadc-tomcat-start"

  # --- Your PREPARE-DATA services remain here ---
  rabbitmq:
    container_name: ska-src-local-data-preparer-rabbitmq
    image: rabbitmq:3.12-management
    networks:
      src-network:
        ipv4_address: 172.26.0.40
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  core:
    container_name: ska-src-local-data-preparer-core
    build:
      context: ${HOME}/ska-src-dm-local-data-preparer
      dockerfile: Dockerfile
    environment:
      PREPARE_DATA_APPROACH: cavern_api_approach
      ABS_PATH_USER_AREA_ROOT: /users/cavern/home
      ABS_PATH_RSE_ROOT: /rse/deterministic
      CELERY_BROKER_URL: amqp://guest@rabbitmq//
      ABS_PATH_CELERY_RESULTS: /var/celery/results
      CAVERN_API_URL: "https://haproxy:443/src/cavern"
      CAVERN_API_TOKEN: "LOCAL_BYPASS_TOKEN"
      ABS_URL_RSE_ROOT: "http://your-rse-webserver-ip:80/rse/deterministic"
    networks:
      src-network:
        ipv4_address: 172.26.0.41
    depends_on:
      - celery-worker
      - src-cavern
      - haproxy
      - rabbitmq
    volumes:
      - ./data/cavern_data:/users/cavern/home:rw
      - ./data/rse_data:/rse/deterministic:ro
      - ./logs/celery_results:/var/celery/results:rw
    extra_hosts:
      - "haproxy.cadc.dao.nrc.ca:172.26.0.2"
      - "src-cavern:172.26.0.60"
      - "rabbitmq:172.26.0.40"

  celery-worker:
    container_name: ska-src-local-data-preparer-celery-worker
    build:
      context: ${HOME}/ska-src-dm-local-data-preparer
      dockerfile: Dockerfile.celery-worker
    environment:
      CELERY_BROKER_URL: amqp://guest@rabbitmq//
      ABS_PATH_CELERY_RESULTS: /var/celery/results
      CAVERN_API_URL: "https://haproxy:443/src/cavern"
      CAVERN_API_TOKEN: "LOCAL_BYPASS_TOKEN"
    command: celery -A prepare_data.worker worker --loglevel=info -c 1
    networks:
      src-network:
        ipv4_address: 172.26.0.42
    depends_on:
      - rabbitmq
      - src-cavern
      - haproxy
    volumes:
      - ./data/cavern_data:/users/cavern/home:rw
      - ./data/rse_data:/rse/deterministic:ro
      - ./logs/celery_results:/var/celery/results:rw
    extra_hosts:
      - "haproxy.cadc.dao.nrc.ca:172.26.0.2"
      - "src-cavern:172.26.0.60"
      - "rabbitmq:172.26.0.40"

networks:
  src-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: src-network
    ipam:
      config:
        - subnet: 172.26.0.0/16

volumes:
  srcnodedb_data:
  postgres_posixmapper_data:
  rabbitmq_data:
  haproxy_cert_data:
  cavern_cert_data: