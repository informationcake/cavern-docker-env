#!/bin/bash
set -e # Exit immediately if a command exits with a non-zero status.

SELF=$1

export DOCKER_NET=docker26

# If this script is called by haproxy's doit, just assign its static IP and exit.
if [[ "$SELF" == "haproxy" ]]; then
  export DOCKER_STATIC_IP=172.26.0.2
  echo "$SELF: $DOCKER_STATIC_IP"
  echo "      DOCKER_NET: $DOCKER_NET"
  # exit 0 # Exit early, no need to wait for haproxy or get its IP for itself
  return 0
fi

# If this script is called by other services, wait for haproxy and get its IP
HAPROXY_CONTAINER_NAME="haproxy"

echo "Waiting for haproxy container to be running..."
until docker ps -f name="$HAPROXY_CONTAINER_NAME" --format '{{.Status}}' | grep -q "Up"; do
  sleep 1
done
echo "haproxy container is up."

HAPIP=$(docker inspect "$HAPROXY_CONTAINER_NAME" | \
        jq -r '.[0].NetworkSettings.Networks."docker26".IPAddress')

if [ -z "$HAPIP" ]; then
  echo "Error: Could not get IP address for haproxy container." >&2
  exit 1
fi
echo "HAPROXY_INTERNAL_IP: $HAPIP"

# Wait for haproxy's internal port 443 to be available via the host's port mapping
echo "Waiting for haproxy's port 443 to be available on the host..."
until nc -z 127.0.0.1 443; do
  sleep 3
  echo "waiting for haproxy's port 443..."
done
echo "haproxy port 443 is available."

# Now, get the static IP for the current service from haproxy.cfg
LINE=$(docker exec "$HAPROXY_CONTAINER_NAME" grep 8080 /usr/local/etc/haproxy/haproxy.cfg | grep "$SELF")
export DOCKER_STATIC_IP=$(echo "$LINE" | awk '{print $3}' | awk -F ':' '{print $1}')

if [ -z "$DOCKER_STATIC_IP" ]; then
  echo "Error: Could not determine DOCKER_STATIC_IP for $SELF." >&2
  exit 1
fi

echo "$SELF: $DOCKER_STATIC_IP"
echo "      DOCKER_NET: $DOCKER_NET"
